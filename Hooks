Hooks are functions that let you “hook into” React state and lifecycle 
features from function components. 
Hooks don’t work inside classes — they let you use React without classes.


When you call useEffect, you’re telling React to run your “effect” function after flushing changes to the DOM.

Effects are declared inside the component so they have access to its props and state. By default,
React runs the effects after every render — including the first render. 

Effects may also optionally specify how to “clean up” after them by returning a function. 
For example, this component uses an effect to subscribe to a friend’s online status, and cleans up by unsubscribing from it:
useEffect(() => {
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);

    return () => {
      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
    };
  });
  
  In this example, React would unsubscribe from our ChatAPI when the component unmounts, 
  as well as before re-running the effect due to a subsequent render.
  
  Hooks let you organize side effects in a component by what pieces are related (such as adding and removing a subscription),
  rather than forcing a split based on lifecycle methods.

