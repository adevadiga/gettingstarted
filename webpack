# Bundlers - Webpack

Bundlers allow us to package, compile, and organize the many assets and libraries
needed for a modern web project.

Same tools: webpack, Gulp, Browserify, NPM Scripts, Grunt

Webpack is a module bundler.
Webpack can take care of bundling alongside a separate task runner.
 However, the line between bundler and task runner has become
blurred thanks to community developed webpack plugins. 

----
## Concepts
At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application,
it internally builds a dependency graph which maps every module your project needs and generates one or more bundles.

To get started you only need to understand its Core Concepts:

> Entry
> Output
> Loaders
> Plugins
> Mode

Entry: An entry point indicates which module webpack should use to begin building out its internal dependency graph. 
webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).
   
    webpack.config.js:

    module.exports = {
        entry: './path/to/my/entry/file.js'
    };

Output: The output property tells webpack where to emit the bundles it creates and how to name these files.
 It defaults to ./dist/main.js for the main output file and to the ./dist folder for any other generated file.

    const path = require('path');

    module.exports = {
        entry: './path/to/my/entry/file.js',
        output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'my-first-webpack.bundle.js'
        }
    };

Loaders:  Out of the box, webpack only understands JavaScript and JSON files. Loaders allow webpack to process other types of 
files and convert them into valid modules that can be consumed by your application and added to the dependency graph.

    module.exports = {
        output: {
            filename: 'my-first-webpack.bundle.js'
        },
        module: {
            rules: [
                { test: /\.txt$/, use: 'raw-loader' }
            ]
        }
    };

Plugins: 
While loaders are used to transform certain types of modules, 
plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management 
and injection of environment variables.

    const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
    const webpack = require('webpack'); //to access built-in plugins

    module.exports = {
    module: {
        rules: [
        { test: /\.txt$/, use: 'raw-loader' }
        ]
    },
    plugins: [
        new HtmlWebpackPlugin({template: './src/index.html'})
    ]
    };


Mode: By setting the mode parameter to either development, production or none, 
    you can enable webpack's built-in optimizations that correspond to each environment. The default value is production.

    module.exports = {
        mode: 'production'
    };

Link: https://webpack.js.org/concepts/