Put simply, event-driven programming is application flow control that is determined by 
events or changes in state. 
The general implementation is to have a central mechanism that listens for events and 
calls a callback function once an event has been detected (i.e. state has changed).


Node itself depends on multiple libraries. One of those is libuv,
the magical library that handles the queueing and processing of asynchronous events. 

Node utilizes as much of what's already available from the operating system's kernel as possible.
Responsibilities like making write requests, holding connections and more are therefore 
delegated to and handled by the system.
For example, incoming connections are queued by the system until they can be handled by Node.


You may have heard that Node has a thread pool, and might be wondering 
"if Node pushes all those responsibilities down why would a thread pool be needed?" 
It's because the kernel doesn't support doing everything asynchronously. 
In those cases Node has to lock a thread for the duration of the operation so it can 
continue executing the event loop without blocking.


https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5

The Event Loop has one simple job — to monitor the Call Stack and the Callback Queue. 
If the Call Stack is empty, it will take the first event from the queue and will push it to
 the Call Stack, which effectively runs it.

Such an iteration is called a tick in the Event Loop. Each event is just a function callback.



######
There's only 1 thread in the node process that will actually execute your program's JavaScript. 
However, within node itself, there are actually several threads handling operation
 of the event loop mechanism,
  and this includes a pool of IO threads and a handful of others.
   The key is the number of these threads does not correspond to the 
   number of concurrent connections being handled like they would in
    a thread-per-connection concurrency model.


    It's a JavaScript runtime built on Chrome's V8 JS engine. 
    Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.


Use case 1: Real-time applications
Collaborative apps (Trello, Google Docs), live-chat, instant-messaging,
 and online gaming are all examples of RTAs that benefit from a Node.js architecture.

